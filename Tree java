class Node {
    int key;
    Node left, right;

    public Node(int item) {
        key = item;
        left = right = null;
    }
}

class BinaryTree {
    // Root of Binary Tree
    Node root;

    BinaryTree() {
        root = null;
    }

    // This method mainly calls insertRec()
    void insert(int key) {
        root = insertRec(root, key);
    }

    Node insertRec(Node root, int key) {
        if (root == null) {
            root = new Node(key);
            return root;
        }

        if (key < root.key)
            root.left = insertRec(root.left, key);
        else if (key > root.key)
            root.right = insertRec(root.right, key);

        return root;
    }

    // This method mainly calls InorderRec()
    void inorder() {
        inorderRec(root);
    }

    // A utility function to do inorder traversal of BST
    void inorderRec(Node root) {
        if (root != null) {
            inorderRec(root.left);
            System.out.print(root.key + " ");
            inorderRec(root.right);
        }
    }

    // Returns maximum value in a binary tree
    int maxValue() {
        return maxValueRec(root);
    }

    int maxValueRec(Node root) {
        int maxValue = Integer.MIN_VALUE;
        if (root != null) {
            int leftMax = maxValueRec(root.left);
            int rightMax = maxValueRec(root.right);
            if (leftMax > rightMax)
                maxValue = leftMax;
            else
                maxValue = rightMax;
            if (root.key > maxValue)
                maxValue = root.key;
        }
        return maxValue;
    }

    // Returns minimum value in a binary tree
    int minValue() {
        return minValueRec(root);
    }

    int minValueRec(Node root) {
        int minValue = Integer.MAX_VALUE;
        if (root != null) {
            int leftMin = minValueRec(root.left);
            int rightMin = minValueRec(root.right);
            if (leftMin < rightMin)
                    minValue = leftMin;
            else
                minValue = rightMin;
            if (root.key < minValue)
                minValue = root.key;
        }
        return minValue;
    }

    int size() {
        return size(root);
    }

    int size(Node root) {
        if (root == null)
            return 0;
        else
            return (size(root.left) + 1 + size(root.right));
    }
}

public class Main {
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        tree.insert(50)
